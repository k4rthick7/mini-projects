"Always use meaningful variable names",
"Use camelCase for variable and method names",
"Class names should be in PascalCase",
"Avoid magic numbers, use named constants",
"Always close resources like files and sockets",
"Use `try-with-resources` to auto-close resources",
"Use `final` for constants and fixed references",
"Prefer `StringBuilder` over `String` in loops",
"Avoid using raw types, use generics",
"Use enums instead of constants for better type safety",
"Write unit tests for all methods",
"Catch specific exceptions, not just Exception",
"Don't suppress exceptions without reason",
"Use proper access modifiers (private, public)",
"Initialize variables at the point of declaration when possible",
"Document public APIs using JavaDoc",
"Split large classes into smaller ones",
"Follow SOLID principles in OOP",
"Minimize the use of static variables",
"Use composition over inheritance where possible",
"Use interfaces for abstraction",
"Name your threads if creating custom threads",
"Always override `hashCode` when overriding `equals`",
"Use `switch` with enums for better clarity",
"Prefer `List` over `ArrayList` in variable declarations",
"Check for nulls to avoid NullPointerException",
"Use `Objects.requireNonNull()` to validate inputs",
"Leverage the `Optional` class to handle nulls",
"Use `Map` for key-value pairs, not custom workarounds",
"Prefer `for-each` loop over traditional `for` when possible",
"Minimize public fields; use private with getters/setters",
"Understand difference between `==` and `.equals()`",
"Don’t compare Strings using `==`, use `.equals()`",
"Use `this` to clarify instance variable usage",
"Avoid using `instanceof` too frequently",
"Be cautious with floating-point comparisons",
"Always override `toString()` for custom classes",
"Use logging frameworks instead of `System.out.println`",
"Handle all checked exceptions appropriately",
"Use assertions only for debugging purposes",
"Declare variables as close as possible to their use",
"Group related classes into packages",
"Keep methods short and focused",
"Don’t write too many nested ifs — simplify logic",
"Keep your code DRY (Don’t Repeat Yourself)",
"Follow Java naming conventions",
"Separate UI logic from business logic",
"Understand the JVM memory model",
"Learn the difference between Stack and Heap memory",
"Understand garbage collection basics",
"Use design patterns where they fit",
"Don’t prematurely optimize your code",
"Use `Collections.unmodifiableList()` when exposing collections",
"Prefer immutability in objects when possible",
"Be aware of integer overflow",
"Use `BigDecimal` for precise financial calculations",
"Use `@Override` annotation when overriding",
"Use `instanceof` before casting objects",
"Know the difference between checked and unchecked exceptions",
"Use `Thread.sleep()` carefully and never in main UI thread",
"Use proper thread synchronization",
"Be careful with shared mutable state",
"Understand reentrant locks and `synchronized` keyword",
"Don’t block the main thread",
"Learn how to use `ExecutorService`",
"Always shut down `ExecutorService`",
"Use `volatile` for shared visibility across threads",
"Prefer `ConcurrentHashMap` over `Hashtable`",
"Understand the difference between shallow and deep copy",
"Don’t rely on garbage collection timing",
"Keep static methods stateless",
"Minimize usage of global variables",
"Use method references and lambda expressions in Java 8+",
"Leverage streams for collection operations",
"Use `Collectors.toList()` to gather stream results",
"Chain stream operations fluently",
"Don’t abuse stream performance in large datasets",
"Avoid modifying a collection while iterating",
"Use `List.of()` for immutable lists in Java 9+",
"Use `var` in local variable declarations (Java 10+)",
"Learn how to profile memory and CPU usage",
"Use unit testing frameworks like JUnit or TestNG",
"Write integration tests for external systems",
"Mock dependencies in unit tests",
"Prefer constructor injection over field injection",
"Use annotations to simplify configuration",
"Write custom exceptions when needed",
"Validate inputs at the method boundary",
"Always sanitize user input",
"Escape special characters in regular expressions",
"Use consistent code formatting",
"Use tools like Checkstyle or SpotBugs",
"Use build tools like Maven or Gradle",
"Understand Maven dependencies and scopes",
"Minimize external dependencies where possible",
"Use interfaces for mocking in tests",
"Prefer private constructors in utility classes",
"Never ignore compiler warnings",
"Use version control (Git) for all projects",
"Commit often with meaningful messages",
"Write modular and reusable code",
"Keep learning – Java is constantly evolving!"
